#!/usr/bin/env ruby

require 'json'
require 'nokogiri'

class Record
  ATTRIBUTES = %i(present past perfect)
  HTML_ATTRIBUTES = %i(forms notes)

  attr_reader *ATTRIBUTES

  def initialize(element)
    attributes = element.css('td')
    if attributes.length != HTML_ATTRIBUTES.length
      raise "expected #{HTML_ATTRIBUTES.length} columns"
    end
    HTML_ATTRIBUTES.each_with_index do |attribute, i|
      self.send("#{attribute}=", attributes[i].text)
    end
  end

  def forms=(text)
    text = text.split("\n")[0]
    chunks = text.split('â€“').collect do |chunk|
      chunk.gsub!('(none)', '')
      chunk.gsub!('(no other forms)', '')
      chunk.gsub!(/\s*\[[^\[\]]*\]/, '')
      chunk.gsub!(/\s*\(([^()]+)\)/, ', \1')
      chunk.gsub!(/([a-z]+) \/[^\/]+\//, '\1')
      chunk.gsub!(/, /, '/')
      chunk.strip!
      chunks = chunk.split(/\s*\/\s*/)
      chunks.reject! { |chunk| chunk.start_with?('*') }
      count = chunks.length
      if count == 0
        nil
      elsif count == 1
        chunks[0]
      else
        "#{chunks[0]} (#{chunks[1..count].join(', ')})"
      end
    end
    raise 'found a malformed verb' if chunks.length > 3
    chunks.push(nil) while chunks.length < 3
    @present = chunks[0]
    @past = chunks[1]
    @perfect = chunks[2]
  end

  def notes=(text)
    text.strip!
    @notes = text.empty? ? nil : text
  end

  def to_json(options = {})
    as_json.to_json(options)
  end

  def as_json(options = {})
    object = {}
    ATTRIBUTES.each do |attribute|
      value = self.send(attribute)
      object[attribute] = value unless value.nil?
    end
    object
  end
end

raise 'an HTML file is required' if ARGV.length < 1

page = Nokogiri::HTML(open(ARGV[0]))
elements = page.css('#mw-content-text tr')
elements.shift

database = []
elements.each do |element|
  database << Record.new(element)
end

puts JSON.pretty_generate(database)
